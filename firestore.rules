rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidDeckData() {
      return request.resource.data.keys().hasAll(['name', 'format', 'mainboard']) &&
             request.resource.data.name is string &&
             request.resource.data.name.size() > 0 &&
             request.resource.data.name.size() <= 100 &&
             request.resource.data.format is string &&
             request.resource.data.mainboard is list &&
             request.resource.data.mainboard.size() <= 75;
    }
    
    function isValidAnalysisData() {
      return request.resource.data.keys().hasAll(['deckId', 'totalLands', 'overallRating']) &&
             request.resource.data.totalLands is int &&
             request.resource.data.totalLands >= 0 &&
             request.resource.data.overallRating is number &&
             request.resource.data.overallRating >= 0 &&
             request.resource.data.overallRating <= 10;
    }
    
    // Public collections (read-only)
    match /formats/{document} {
      allow read: if true;
    }
    
    match /cards/{document} {
      allow read: if true;
    }
    
    // User profiles
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow create: if isAuthenticated() && 
                   request.auth.uid == userId &&
                   request.resource.data.keys().hasAll(['email', 'displayName']) &&
                   request.resource.data.email == request.auth.token.email;
    }
    
    // User preferences
    match /users/{userId}/preferences/{document} {
      allow read, write: if isOwner(userId);
    }
    
    // Decks
    match /decks/{deckId} {
      allow read: if isOwner(resource.data.userId) || 
                     (resource.data.visibility == 'public');
      
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid &&
                   isValidDeckData();
      
      allow update: if isOwner(resource.data.userId) && 
                   request.resource.data.userId == resource.data.userId &&
                   isValidDeckData();
      
      allow delete: if isOwner(resource.data.userId);
    }
    
    // Manabase analyses
    match /analyses/{analysisId} {
      allow read: if isOwner(resource.data.userId);
      
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid &&
                   isValidAnalysisData();
      
      allow update: if isOwner(resource.data.userId) && 
                   request.resource.data.userId == resource.data.userId;
      
      allow delete: if isOwner(resource.data.userId);
    }
    
    // Shared deck collections
    match /collections/{collectionId} {
      allow read: if resource.data.visibility == 'public' || 
                     isOwner(resource.data.userId) ||
                     request.auth.uid in resource.data.collaborators;
      
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      
      allow update: if isOwner(resource.data.userId) ||
                   (request.auth.uid in resource.data.collaborators &&
                    request.resource.data.userId == resource.data.userId);
      
      allow delete: if isOwner(resource.data.userId);
    }
    
    // User statistics and metrics
    match /stats/{userId} {
      allow read: if isOwner(userId);
      allow write: if false; // Only server can write stats
    }
    
    // Rate limiting and security logs
    match /security/{document} {
      allow read, write: if false; // Only server access
    }
    
    // System configuration (admin only)
    match /config/{document} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server/admin access
    }
    
    // Feedback and support
    match /feedback/{feedbackId} {
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      
      allow read: if isOwner(resource.data.userId);
      
      // No updates or deletes allowed for feedback integrity
    }
    
    // Cache collections (temporary data)
    match /cache/{document} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server can manage cache
    }
    
    // Audit logs (security)
    match /audit/{document} {
      allow read, write: if false; // Server only
    }
  }
} 